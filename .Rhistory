# rotating ring goes inside stationary ring
figureType = 'Hypotrochoid'
if (radius1==radius2)  figureType="Ellipse (stationary Ring = 2 * Rotating Ring)"
if (penLoc==radius2)  figureType="Hypocycloid (Pen Size = Rotating Ring)"
dat<-hypoTrochoid(radius1,radius2,penLoc,defaultTheta)
}
# are these special cases?
# zoom might clip ring visibility but make figure fill plot area
if (zoom)
maxRange= max(abs(dat))
else
maxRange=radius1+abs(radius2)+penLoc
plotRange=c(-maxRange,maxRange)
t.plot<-ggplot(data=dat[1:point,],aes(x=x,y=y))+geom_path(color=penColor)+xlim(plotRange)+ylim(plotRange)
#plot rotating ring and 'pen' for last point
if (overlay) t.plot <- ggoverlayCircles(t.plot,radius1,radius2,
px =dat[point,]$x,
py =dat[point,]$y,
cx =dat[point,]$cx,
cy =dat[point,]$cy,
penColor)
print(t.plot)
}
ggplotcTrochoid_A(100,-20,10,4)
ggplotcTrochoid_c(100,-20,10,4)
ggplotcTrochoid_c(100,-20,10,40)
dat
epiTrochoid()
dat<-epiTrochoid()
dat
epiTrochoid <-function(r1=100,r2=10,penLoc=10,theta=defaultTheta)  {
#cyclic Trochoid
#http://en.wikipedia.org/wiki/epitrochoid
cx <-(r1+r2)*cos(theta)
x<- cx - penLoc*cos((r1+r2)/r2*theta)
cy <-(r1+r2)*sin(theta)
y<- cy - penLoc*sin((r1+r2)/r2*theta)
return(tibble(x,y,cx,cy))
}
library(shiny)
library(grid)
library(ggplot2)
library(gganimate)
debug=FALSE
# angle in radians
# draw 2*pi cycles with a point every 1/density radians
calcCycles=100
density =100
defaultTheta <- 2 * pi * seq(0, calcCycles, by = 1/density)
defaultPoints = length(defaultTheta)
circle <- function(cx=0,cy=0,radius = 1, npoints = 100){
tt <- seq(0,2*pi,length.out = npoints)
xx <- cx + radius * cos(tt)
yy <- cy + radius * sin(tt)
return(tibble(x = xx, y = yy))
}
ggoverlayCircles<-function(base.gg,radius1,radius2,px,py,cx,cy,penColor){
c1<-geom_path(data=circle(0,0,radius1),aes(x,y),lwd=2,na.rm=TRUE)
c2<-geom_path(data=circle(cx,cy,abs(radius2)),aes(x,y),lwd=2,na.rm=TRUE)
l1<- geom_segment(x = cx,
y = cy,
xend = px,
yend = py,
arrow = arrow(length = unit(0.5, "cm")),
color=penColor,lwd=2)
return (base.gg + c1+c2+l1)
}
hypoTrochoid <-function(r1=100,r2=-10,penLoc=10,theta=defaultTheta)  {
#cyclic Trochoid
#http://en.wikipedia.org/wiki/Hypotrochoid
# in the user interface we denote hypotrochoid by a negative r2 so flip this sign for the usual formulation
r2 = -r2
#cx,cy is center of moving ring, x,y is point to plot
cx <-(r1-r2)*cos(theta)
x <- cx + penLoc*cos((r1-r2)/r2*theta)
cy <-(r1-r2)*sin(theta)
y <- cy - penLoc*sin((r1-r2)/r2*theta)
return(tibble(x,y,cx,cy))
}
epiTrochoid <-function(r1=100,r2=10,penLoc=10,theta=defaultTheta)  {
#cyclic Trochoid
#http://en.wikipedia.org/wiki/epitrochoid
cx <-(r1+r2)*cos(theta)
x<- cx - penLoc*cos((r1+r2)/r2*theta)
cy <-(r1+r2)*sin(theta)
y<- cy - penLoc*sin((r1+r2)/r2*theta)
return(tibble(x,y,cx,cy))
}
#---------------------------------------------------------------------------
#---------------------------------------------------------------------------
compute_CTrochoid<-function(radius1=100,radius2=20, penLoc=5) {
#figuretype is not used yet
if (radius2>0) {
# rotating ring goes outside stationary ring
figureType ='Epitrochoid'
if (radius1==radius2)  figureType="Epicycloid (stationary Ring=Rotating Ring)"
if (penLoc==radius2)  figureType="Limaçon (Pen Length = Rotating Ring)"
if (penLoc==0)  figureType="Circle (Pen Length = 0)"
points<-epiTrochoid(radius1,radius2,penLoc,defaultTheta)
}
else {
# rotating ring goes inside stationary ring
figureType = 'Hypotrochoid'
if (radius1==-2*radius2)  figureType="Ellipse (stationary Ring = 2 * Rotating Ring)"
if (penLoc==-radius2)  figureType="Hypocycloid (Pen Size = Rotating Ring)"
points<-hypoTrochoid(radius1,radius2,penLoc,defaultTheta)
}
return (list(points=points,figureType=figureType))
}
# ----------------- old plotter ------------------
ggplotcTrochoid_A<-function(radius1=100,radius2=-20,
penLoc=10,point=defaultPoints,
overlay=TRUE,penColor="black",zoom=FALSE) {
if (radius2>0) {
# rotating ring goes outside stationary ring
figureType ='Epitrochoid'
if (radius1==radius2)  figureType="Epicycloid (stationary Ring=Rotating Ring)"
if (penLoc==radius2)  figureType="Limaçon (Pen Size = Rotating Ring)"
if (penLoc==0)  figureType="Circle (Pen Size = 0)"
dat<-epiTrochoid(radius1,radius2,penLoc,defaultTheta)
}
else {
# rotating ring goes inside stationary ring
figureType = 'Hypotrochoid'
if (radius1==radius2)  figureType="Ellipse (stationary Ring = 2 * Rotating Ring)"
if (penLoc==radius2)  figureType="Hypocycloid (Pen Size = Rotating Ring)"
dat<-hypoTrochoid(radius1,radius2,penLoc,defaultTheta)
}
# are these special cases?
# zoom might clip ring visibility but make figure fill plot area
if (zoom)
maxRange= max(abs(dat))
else
maxRange=radius1+abs(radius2)+penLoc
plotRange=c(-maxRange,maxRange)
t.plot<-ggplot(data=dat[1:point,],aes(x=x,y=y))+geom_path(color=penColor)+xlim(plotRange)+ylim(plotRange)
#plot rotating ring and 'pen' for last point
if (overlay) t.plot <- ggoverlayCircles(t.plot,radius1,radius2,
px =dat[point,]$x,
py =dat[point,]$y,
cx =dat[point,]$cx,
cy =dat[point,]$cy,
penColor)
print(t.plot)
}
#-------------------------------------------------------------------------------------------
ggplotcTrochoid_c<-function(radius1=100,radius2=-20,
penLoc=10,point=defaultPoints,
overlay=TRUE,penColor="black",zoom=FALSE) {
if (radius2>0) {
# rotating ring goes outside stationary ring
figureType ='Epitrochoid'
if (radius1==radius2)  figureType="Epicycloid (stationary Ring=Rotating Ring)"
if (penLoc==radius2)  figureType="Limaçon (Pen Size = Rotating Ring)"
if (penLoc==0)  figureType="Circle (Pen Size = 0)"
dat<-epiTrochoid(radius1,radius2,penLoc,defaultTheta)
}
else {
# rotating ring goes inside stationary ring
figureType = 'Hypotrochoid'
if (radius1==radius2)  figureType="Ellipse (stationary Ring = 2 * Rotating Ring)"
if (penLoc==radius2)  figureType="Hypocycloid (Pen Size = Rotating Ring)"
dat<-hypoTrochoid(radius1,radius2,penLoc,defaultTheta)
}
# are these special cases?
# zoom might clip ring visibility but make figure fill plot area
if (zoom)
maxRange= max(abs(dat))
else
maxRange=radius1+abs(radius2)+penLoc
plotRange=c(-maxRange,maxRange)
t.plot<-ggplot(data=dat[1:point,],aes(x=x,y=y))+geom_path(color=penColor)+xlim(plotRange)+ylim(plotRange)
#plot rotating ring and 'pen' for last point
if (overlay) t.plot <- ggoverlayCircles(t.plot,radius1,radius2,
px =dat[point,]$x,
py =dat[point,]$y,
cx =dat[point,]$cx,
cy =dat[point,]$cy,
penColor)
t.plot- t.plot + transition_manual()
print(t.plot)
}
dat<-epiTrochoid()
dat
dat<-epiTrochoid(radius1,radius2,penLoc,defaultTheta) %>% mutate(index=1:point)
dat
dat<-dat %>% mutate(index=1:defaultPoints)
dat
ggplotcTrochoid_A()
#-------------------------------------------------------------------------------------------
ggplotcTrochoid_c<-function(radius1=100,radius2=-20,
penLoc=10,point=defaultPoints,
overlay=TRUE,penColor="black",zoom=FALSE) {
if (radius2>0) {
# rotating ring goes outside stationary ring
figureType ='Epitrochoid'
if (radius1==radius2)  figureType="Epicycloid (stationary Ring=Rotating Ring)"
if (penLoc==radius2)  figureType="Limaçon (Pen Size = Rotating Ring)"
if (penLoc==0)  figureType="Circle (Pen Size = 0)"
dat<-epiTrochoid(radius1,radius2,penLoc,defaultTheta) %>% mutate(index=1:point)
}
else {
# rotating ring goes inside stationary ring
figureType = 'Hypotrochoid'
if (radius1==radius2)  figureType="Ellipse (stationary Ring = 2 * Rotating Ring)"
if (penLoc==radius2)  figureType="Hypocycloid (Pen Size = Rotating Ring)"
dat<-hypoTrochoid(radius1,radius2,penLoc,defaultTheta)
}
# are these special cases?
# zoom might clip ring visibility but make figure fill plot area
if (zoom)
maxRange= max(abs(dat))
else
maxRange=radius1+abs(radius2)+penLoc
plotRange=c(-maxRange,maxRange)
t.plot<-ggplot(data=dat[1:point,],aes(x=x,y=y))+geom_path(color=penColor)+xlim(plotRange)+ylim(plotRange)
#plot rotating ring and 'pen' for last point
if (overlay) t.plot <- ggoverlayCircles(t.plot,radius1,radius2,
px =dat[point,]$x,
py =dat[point,]$y,
cx =dat[point,]$cx,
cy =dat[point,]$cy,
penColor)
t.plot<- t.plot + transition_manual(frames=index)
print(t.plot)
}
ggplotcTrochoid_c()
#-------------------------------------------------------------------------------------------
ggplotcTrochoid_c<-function(radius1=100,radius2=-20,
penLoc=10,point=defaultPoints,
overlay=TRUE,penColor="black",zoom=FALSE) {
if (radius2>0) {
# rotating ring goes outside stationary ring
figureType ='Epitrochoid'
if (radius1==radius2)  figureType="Epicycloid (stationary Ring=Rotating Ring)"
if (penLoc==radius2)  figureType="Limaçon (Pen Size = Rotating Ring)"
if (penLoc==0)  figureType="Circle (Pen Size = 0)"
dat<-epiTrochoid(radius1,radius2,penLoc,defaultTheta) %>% mutate(index=1:point)
}
else {
# rotating ring goes inside stationary ring
figureType = 'Hypotrochoid'
if (radius1==radius2)  figureType="Ellipse (stationary Ring = 2 * Rotating Ring)"
if (penLoc==radius2)  figureType="Hypocycloid (Pen Size = Rotating Ring)"
dat<-hypoTrochoid(radius1,radius2,penLoc,defaultTheta) %>% mutate(index=1:point)
}
# are these special cases?
# zoom might clip ring visibility but make figure fill plot area
if (zoom)
maxRange= max(abs(dat))
else
maxRange=radius1+abs(radius2)+penLoc
plotRange=c(-maxRange,maxRange)
t.plot<-ggplot(data=dat[1:point,],aes(x=x,y=y))+geom_path(color=penColor)+xlim(plotRange)+ylim(plotRange)
#plot rotating ring and 'pen' for last point
if (overlay) t.plot <- ggoverlayCircles(t.plot,radius1,radius2,
px =dat[point,]$x,
py =dat[point,]$y,
cx =dat[point,]$cx,
cy =dat[point,]$cy,
penColor)
t.plot<- t.plot + transition_manual(frames=index)
print(t.plot)
}
ggplotcTrochoid_c()
#-------------------------------------------------------------------------------------------
ggplotcTrochoid_c<-function(radius1=100,radius2=-20,
penLoc=10,point=defaultPoints,
overlay=TRUE,penColor="black",zoom=FALSE) {
if (radius2>0) {
# rotating ring goes outside stationary ring
figureType ='Epitrochoid'
if (radius1==radius2)  figureType="Epicycloid (stationary Ring=Rotating Ring)"
if (penLoc==radius2)  figureType="Limaçon (Pen Size = Rotating Ring)"
if (penLoc==0)  figureType="Circle (Pen Size = 0)"
dat<-epiTrochoid(radius1,radius2,penLoc,defaultTheta) %>% mutate(index=1:point)
}
else {
# rotating ring goes inside stationary ring
figureType = 'Hypotrochoid'
if (radius1==radius2)  figureType="Ellipse (stationary Ring = 2 * Rotating Ring)"
if (penLoc==radius2)  figureType="Hypocycloid (Pen Size = Rotating Ring)"
dat<-hypoTrochoid(radius1,radius2,penLoc,defaultTheta) %>% mutate(index=1:point)
}
# are these special cases?
# zoom might clip ring visibility but make figure fill plot area
if (zoom)
maxRange= max(abs(dat))
else
maxRange=radius1+abs(radius2)+penLoc
plotRange=c(-maxRange,maxRange)
#create plot
t.plot<-ggplot(data=dat,aes(x=x,y=y))+geom_path(color=penColor)+xlim(plotRange)+ylim(plotRange)
#plot rotating ring and 'pen' for last point
if (overlay) t.plot <- ggoverlayCircles(t.plot,radius1,radius2,
px =dat[point,]$x,
py =dat[point,]$y,
cx =dat[point,]$cx,
cy =dat[point,]$cy,
penColor)
t.plot<- t.plot + transition_manual(frames=index)
print(t.plot)
}
ggplotcTrochoid_c()
ggplotcTrochoid_A()
ggplotcTrochoid_A()
# ----------------- old plotter ------------------
ggplotcTrochoid_A<-function(radius1=100,radius2=-20,
penLoc=10,point=defaultPoints,
overlay=TRUE,penColor="black",zoom=FALSE) {
if (radius2>0) {
# rotating ring goes outside stationary ring
figureType ='Epitrochoid'
if (radius1==radius2)  figureType="Epicycloid (stationary Ring=Rotating Ring)"
if (penLoc==radius2)  figureType="Limaçon (Pen Size = Rotating Ring)"
if (penLoc==0)  figureType="Circle (Pen Size = 0)"
dat<-epiTrochoid(radius1,radius2,penLoc,defaultTheta)
}
else {
# rotating ring goes inside stationary ring
figureType = 'Hypotrochoid'
if (radius1==radius2)  figureType="Ellipse (stationary Ring = 2 * Rotating Ring)"
if (penLoc==radius2)  figureType="Hypocycloid (Pen Size = Rotating Ring)"
dat<-hypoTrochoid(radius1,radius2,penLoc,defaultTheta)
}
# are these special cases?
# zoom might clip ring visibility but make figure fill plot area
if (zoom)
maxRange= max(abs(dat))
else
maxRange=radius1+abs(radius2)+penLoc
plotRange=c(-maxRange,maxRange)
t.plot<-ggplot(data=dat[1:point,],aes(x=x,y=y))+geom_path(color=penColor)+xlim(plotRange)+ylim(plotRange)
#plot rotating ring and 'pen' for last point
if (overlay) t.plot <- ggoverlayCircles(t.plot,radius1,radius2,
px =dat[point,]$x,
py =dat[point,]$y,
cx =dat[point,]$cx,
cy =dat[point,]$cy,
penColor)
print(t.plot)
}
ggplotcTrochoid_A()
t.plot<-ggplot(data=dat[1:point,],aes(x=x,y=y))+geom_path(color=penColor)+xlim(plotRange)+ylim(plotRange)
point<-defaultPoints
t.plot<-ggplot(data=dat[1:point,],aes(x=x,y=y))+geom_path(color=penColor)+xlim(plotRange)+ylim(plotRange)
penColor = "black"
t.plot<-ggplot(data=dat[1:point,],aes(x=x,y=y))+geom_path(color=penColor)+xlim(plotRange)+ylim(plotRange)
t.plot<-ggplot(data=dat[1:point,],aes(x=x,y=y))+geom_path(color=penColor)
t.plot
dat
plot(dat$x,dat$y)
dat
library(shiny)
library(grid)
library(ggplot2)
library(gganimate)
suppressPackageStartupMessages(library(tidyverse))
debug=FALSE
# angle in radians
# draw 2*pi cycles with a point every 1/density radians
calcCycles=100
density =100
defaultTheta <- 2 * pi * seq(0, calcCycles, by = 1/density)
defaultPoints = length(defaultTheta)
circle <- function(cx=0,cy=0,radius = 1, npoints = 100){
tt <- seq(0,2*pi,length.out = npoints)
xx <- cx + radius * cos(tt)
yy <- cy + radius * sin(tt)
return(tibble(x = xx, y = yy))
}
ggoverlayCircles<-function(base.gg,radius1,radius2,px,py,cx,cy,penColor){
c1<-geom_path(data=circle(0,0,radius1),aes(x,y),lwd=2,na.rm=TRUE)
c2<-geom_path(data=circle(cx,cy,abs(radius2)),aes(x,y),lwd=2,na.rm=TRUE)
l1<- geom_segment(x = cx,
y = cy,
xend = px,
yend = py,
arrow = arrow(length = unit(0.5, "cm")),
color=penColor,lwd=2)
return (base.gg + c1+c2+l1)
}
hypoTrochoid <-function(r1=100,r2=-10,penLoc=10,theta=defaultTheta)  {
#cyclic Trochoid
#http://en.wikipedia.org/wiki/Hypotrochoid
# in the user interface we denote hypotrochoid by a negative r2 so flip this sign for the usual formulation
r2 = -r2
#cx,cy is center of moving ring, x,y is point to plot
cx <-(r1-r2)*cos(theta)
x <- cx + penLoc*cos((r1-r2)/r2*theta)
cy <-(r1-r2)*sin(theta)
y <- cy - penLoc*sin((r1-r2)/r2*theta)
return(tibble(x,y,cx,cy))
}
epiTrochoid <-function(r1=100,r2=10,penLoc=10,theta=defaultTheta)  {
#cyclic Trochoid
#http://en.wikipedia.org/wiki/epitrochoid
cx <-(r1+r2)*cos(theta)
x<- cx - penLoc*cos((r1+r2)/r2*theta)
cy <-(r1+r2)*sin(theta)
y<- cy - penLoc*sin((r1+r2)/r2*theta)
return(tibble(x,y,cx,cy))
}
#---------------------------------------------------------------------------
#---------------------------------------------------------------------------
compute_CTrochoid<-function(radius1=100,radius2=20, penLoc=5) {
#figuretype is not used yet
if (radius2>0) {
# rotating ring goes outside stationary ring
figureType ='Epitrochoid'
if (radius1==radius2)  figureType="Epicycloid (stationary Ring=Rotating Ring)"
if (penLoc==radius2)  figureType="Limaçon (Pen Length = Rotating Ring)"
if (penLoc==0)  figureType="Circle (Pen Length = 0)"
points<-epiTrochoid(radius1,radius2,penLoc,defaultTheta)
}
else {
# rotating ring goes inside stationary ring
figureType = 'Hypotrochoid'
if (radius1==-2*radius2)  figureType="Ellipse (stationary Ring = 2 * Rotating Ring)"
if (penLoc==-radius2)  figureType="Hypocycloid (Pen Size = Rotating Ring)"
points<-hypoTrochoid(radius1,radius2,penLoc,defaultTheta)
}
return (list(points=points,figureType=figureType))
}
# ----------------- old plotter ------------------
ggplotcTrochoid_A<-function(radius1=100,radius2=-20,
penLoc=10,point=defaultPoints,
overlay=TRUE,penColor="black",zoom=FALSE) {
if (radius2>0) {
# rotating ring goes outside stationary ring
figureType ='Epitrochoid'
if (radius1==radius2)  figureType="Epicycloid (stationary Ring=Rotating Ring)"
if (penLoc==radius2)  figureType="Limaçon (Pen Size = Rotating Ring)"
if (penLoc==0)  figureType="Circle (Pen Size = 0)"
dat<-epiTrochoid(radius1,radius2,penLoc,defaultTheta)
}
else {
# rotating ring goes inside stationary ring
figureType = 'Hypotrochoid'
if (radius1==radius2)  figureType="Ellipse (stationary Ring = 2 * Rotating Ring)"
if (penLoc==radius2)  figureType="Hypocycloid (Pen Size = Rotating Ring)"
dat<-hypoTrochoid(radius1,radius2,penLoc,defaultTheta)
}
# are these special cases?
# zoom might clip ring visibility but make figure fill plot area
if (zoom)
maxRange= max(abs(dat))
else
maxRange=radius1+abs(radius2)+penLoc
plotRange=c(-maxRange,maxRange)
t.plot<-ggplot(data=dat[1:point,],aes(x=x,y=y))+geom_path(color=penColor)+xlim(plotRange)+ylim(plotRange)
#plot rotating ring and 'pen' for last point
if (overlay) t.plot <- ggoverlayCircles(t.plot,radius1,radius2,
px =dat[point,]$x,
py =dat[point,]$y,
cx =dat[point,]$cx,
cy =dat[point,]$cy,
penColor)
print(t.plot)
}
#-------------------------------------------------------------------------------------------
ggplotcTrochoid_C<-function(radius1=100,radius2=-20,
penLoc=10,point=defaultPoints,
overlay=TRUE,penColor="black",zoom=FALSE) {
if (radius2>0) {
# rotating ring goes outside stationary ring
figureType ='Epitrochoid'
if (radius1==radius2)  figureType="Epicycloid (stationary Ring=Rotating Ring)"
if (penLoc==radius2)  figureType="Limaçon (Pen Size = Rotating Ring)"
if (penLoc==0)  figureType="Circle (Pen Size = 0)"
dat<-epiTrochoid(radius1,radius2,penLoc,defaultTheta) %>% mutate(index=1:point)
}
else {
# rotating ring goes inside stationary ring
figureType = 'Hypotrochoid'
if (radius1==radius2)  figureType="Ellipse (stationary Ring = 2 * Rotating Ring)"
if (penLoc==radius2)  figureType="Hypocycloid (Pen Size = Rotating Ring)"
dat<-hypoTrochoid(radius1,radius2,penLoc,defaultTheta) %>% mutate(index=1:point)
}
# are these special cases?
# zoom might clip ring visibility but make figure fill plot area
if (zoom)
maxRange= max(abs(dat))
else
maxRange=radius1+abs(radius2)+penLoc
plotRange=c(-maxRange,maxRange)
#create plot
t.plot<-ggplot(data=dat[1:point],aes(x=x,y=y))+geom_path(color=penColor)+xlim(plotRange)+ylim(plotRange)
#plot rotating ring and 'pen' for last point
if (overlay) t.plot <- ggoverlayCircles(t.plot,radius1,radius2,
px =dat[point,]$x,
py =dat[point,]$y,
cx =dat[point,]$cx,
cy =dat[point,]$cy,
penColor)
t.plot<- t.plot + transition_time(frames=index)
print(t.plot)
}
dat<-hypoTrochoid() %>% mutate(index=1:point)
dat<-hypoTrochoid() %>% mutate(index=1:defaultPoints)
dat
dat<-hypoTrochoid() %>% mutate(index=1:point)
dat
t.plot<-ggplot(data=dat,aes(x=x,y=y))+geom_point()
t.plot
t.plot + transition_manual(index,cumulative = TRUE)
t.plot<-ggplot(data=dat[1:100],aes(x=x,y=y))+geom_point()
t.plot<-ggplot(data=dat[1:100,],aes(x=x,y=y))+geom_point()
t.plot
t.plot + transition_manual(index,cumulative = TRUE)
t.plot + transition_manual(index,cumulative = TRUE)+ease_aes()
t.plot + transition_manual(index,cumulative = TRUE)+ease_aes()+shadow_trail()
